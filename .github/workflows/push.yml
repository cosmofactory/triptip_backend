name: Code Style and pytest
run-name: Push to ${{ github.ref_name }} by @${{ github.actor }}

on:
  push

jobs:

  test_and_lint:
    runs-on: ubuntu-22.04
    services:
        postgres:
          image: postgres:14
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: test_triptip
          ports:
            - 5432:5432

    steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-python@v4
          with:
            python-version: 3.12.2

        - name: Install poetry
          uses: abatilo/actions-poetry@v3.0.0

        - name: Setup a local virtual environment
          run: |
            poetry config virtualenvs.create true --local
            poetry config virtualenvs.in-project true --local

        - uses: actions/cache@v3
          name: Define a cache for the virtual environment based on the dependencies lock file
          with:
            path: ./.venv
            key: venv-${{ hashFiles('poetry.lock') }}

        - name: Install the project dependencies
          run: poetry install

        - run: mkdir coverage
        - name: Run pytest
          run: MODE=TEST poetry run pytest --cov=src
          env:
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_PORT: ${{ secrets.DB_PORT }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASS: ${{ secrets.DB_PASS }}
            DB_NAME: ${{ secrets.DB_NAME }}
            MODE: TEST
            COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py3.12.2
            CONTEXT: ${{ runner.os }}-py3.12.2

        - name: Run ruff
          run: poetry run ruff check .
        - name: Store coverage files
          uses: actions/upload-artifact@v3
          with:
            name: coverage
            path: coverage
  
  coverage:
    needs: test_and_lint
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12.2'
      - name: Get coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage
      - run: pip install coverage[toml]
      - run: ls -la coverage
      - run: coverage combine coverage
      - run: coverage report
      - run: coverage html --show-contexts --title "Coverage for ${{ github.sha }}"
      - name: Store coverage HTML
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html
          path: htmlcov
  
  smokeshow:
    needs: coverage
    runs-on: ubuntu-latest

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12.2'

      - run: pip install smokeshow
      - run: smokeshow upload coverage-html
        env:
          SMOKESHOW_GITHUB_STATUS_DESCRIPTION: Coverage {coverage-percentage}
          SMOKESHOW_GITHUB_COVERAGE_THRESHOLD: 100
          SMOKESHOW_GITHUB_CONTEXT: coverage
          SMOKESHOW_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SMOKESHOW_AUTH_KEY: ${{ secrets.SMOKESHOW_AUTH_KEY }}